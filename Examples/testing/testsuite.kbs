# testsuite for BASIC256

# This program will test most of the basic256 language compiler and interperter

# Modification History
# date		programmer	description
# 20121103	j.m.reneau	added strings, file io, '' strings
# 20121122	j.m.reneau	added freefile, freedb, freedbset, multiple db connections,
#				and multiple db sets open on a single connection
# 20121125	j.m.reneau	added dbnull and logic to test dbstring,
#				dbint, dbfloat, and dbnull with column names and numbers
# 20130102	j.m.reneau	added color with pen and fill and penwidth
# 20130126	j.m.reneau	added alert/confirm, sprites, imgsave, and imgload
# 20130205	j.m.reneau	added radix conversion test
# 20130208	j.m.reneau	removed DECIMAL statement and added SCI notation
# 20130403	j.m.reneau	added mouse test
# 20130610	j.m.reneau	added jump around subroutines - program will not run before 0.9.9.60
# 20130610	j.m.reneau	changed error trap test to trap 9999 (number less than 0 now untrappable)
# 20130903	j.m.reneau	added tests for exit (do|if|for|while) and continue (do|for|while)
# 20130906	j.m.reneau	arranged tests so that interactive tests were first for speed
#				added tests for floating point to integer compare (epsilon)
# 20130918	j.m.reneau	moved functions to seperate file and included them

include "testsuite_functions.kbs"

call versiontest(90969)
function versiontestgood(needed)
   return version >= needed
end function
subroutine versiontest(needed)
   if not versiontestgood(needed) then
      print "this program requires version " + (needed\1000000) + "." + (needed\10000%100) + "." + (needed\100%100) + "." + (needed%100) + " or better"
      end
   end if
end subroutine

# create arrays to use
dim c(10)
dim twod(10,10)

###################################################
###################################################
###################################################
## Iteractive tests follow
###################################################
###################################################
###################################################


###################################################
call section("1D Numeric Array")
###################################################
c = {9,8,7,6,5,4,3,2,1,0}
call n("c[1]=8 after immediate assign",c[1],8)
call n("c[8]=1 after immediate assign",c[8],1)
c[0] = c[0] + c[8] : call n("c[0] after c[0] = c[0] + c[8]", c[0], 10)
c[0] += c[7] : call n("c[0] after c[0] += c[7]", c[0], 12)
c[0] -= c[6] : call n("c[0] after c[0] -= c[6]", c[0], 9)
c[1] *= c[2] : call n("c[1] after c[1] *= c[2]", c[1], 56)
c[1] /= c[7] : call n("c[1] after c[1] /= c[7]", c[1], 28)
redim c(20)
call n("c[1]=28 after redim",c[1],28)
call n("c[9]=0 after redim",c[9],0)
input "Input the number -3.14 > ", c[2]
call n("c[2]=-3.14 after rinput",c[2],-3.14)
input "Input the string 'crap' > ", c[2]
call n("c[2]=0 after input crap",c[2],0)

###################################################
call section("2D Numeric Array")
###################################################
for t = 0 to twod[?,]-1
   for u = 0 to twod[,?]-1
      twod[t,u] = t*100+u
   next u
next t
call n("twod[5,7]=507 after assign",twod[5,7],507)
twod[5,7]+=7
call n("twod[5,7] after twod[5,7]+=7",twod[5,7],514)
twod[5,7]-=7
call n("twod[5,7] after twod[5,7]-=7",twod[5,7],507)
twod[5,7]*=7
call n("twod[5,7] after twod[5,7]*=7",twod[5,7],3549)
twod[5,7]/=7
call n("twod[5,7] after twod[5,7]/=7",twod[5,7],507)
twod[5,7]++
call n("twod[5,7] after twod[5,7]++",twod[5,7],508)
twod[5,7]--
call n("twod[5,7] after twod[5,7]--",twod[5,7],507)
for t = 0 to twod[?,]-1
   for u = 0 to twod[,?]-1
      call n("twod["+t+","+u+"] as originally assigned",twod[t,u],t*100+u)
      twod[t,u] = t*100+u
   next u
next t
input "Input the number -3.14 > ", twod[2,1]
call n("twod[2,1]=-3.14 after rinput",twod[2,1],-3.14)
input "Input the string 'crap' > ", twod[3,2]
call n("twod[3,2]=0 after input crap",twod[3,2],0)

###################################################
call section("1D/2D String Array")
###################################################
c$ = {"A","B","C","D","E","F"}	#autodim
call s("c$[0]=A",c$[0],"A")
call s("c$[1]=B",c$[1],"B")
call s("c$[2]=C",c$[2],"C")
call s("c$[3]=D",c$[3],"D")
call s("c$[4]=E",c$[4],"E")
call s("c$[5]=F",c$[5],"F")
#
input "input string 'able' >", c$[5]
call s("c$[5]='able'",c$[5],"able")
#
redim c$(5,2)
call s("c$[0,0]=A",c$[0,0],"A")
call s("c$[0,1]=B",c$[0,1],"B")
call s("c$[1,0]=C",c$[1,0],"C")
call s("c$[1,1]=D",c$[1,1],"D")
call s("c$[2,0]=E",c$[2,0],"E")
call s("c$[2,1]=able",c$[2,1],"able")
call s("c$[3,0]=''",c$[3,0],"")
call s("c$[3,1]=''",c$[3,1],"")
call s("c$[4,0]=''",c$[3,0],"")
call s("c$[4,1]=''",c$[3,1],"")
# switch
t$ = c$[0,1]
c$[0,1]=c$[0,0]
c$[0,0] = t$
call s("c$[0,0]=B",c$[0,0],"B")
call s("c$[0,1]=A",c$[0,1],"A")
#
input "input string 'alpha' > ", c$[3,1]
call s("c$[3,1]='alpha'",c$[3,1],"alpha")

###################################################
call section("Input, Key, and Prompt")
###################################################
a$ = "foo"
input "input the string 'abcd' ?", a$
call s("input prompt $",a$,"abcd")
print "input the string 'able' ?";
input a$
call s("input $",a$,"able")
input "Press enter?", a$
call s("input enter $",a$,"")
a = 99
input "input the number 99.99 ?", a
call n("input prompt #",a,99.99)
print "input the number -1.234 ?";
input a
call s("input #",a,-1.234)
input "input the string 'abcd' ?", a
call n("input prompt bad #",a,0)
input "Press enter?", a
call s("input enter #",a,0)
print "Press the space bar"
# debounce
do
   a = key
until a = 0
# get key
do
   a = key
until a <> 0
call n("key space",a,32)
print "Press the shift key."
# debounce
do
   a = key
until a = 0
# get key
do
   a = key
until a <> 0
call n("key shift",a,16777248)
a$=prompt("Click OK to accept the default","abcd")
call s("prompt dialog default",a$,"abcd")
a$=prompt("Change the value and click cancel","abcd")
call s("prompt dialog cancel default",a$,"abcd")
a$=prompt("Change the value to 'able' and click OK")
call s("prompt dialog",a$,"able")

###################################################
call section("Basic Graphics")
###################################################
clg
color blue
rect 10,10,20,20
call q("Blue rectangle")
call n("is 20,20 blue",pixel(20,20), blue)
#
clg
color red
call n("is current color red",getcolor, red)
circle 30,30,10
call q("red circle")
#
clg
for t = 1 to 10
   color rgb(rand*256,rand*256,rand*256), rgb(rand*256,rand*256,rand*256)
   circle rand*300,rand*300,rand*10+10
next t
call q("10 random circles")
#
clg
color black
for t = 0 to 300 step 3
   line 0,0,t,300
   line 0,0,300,t
next t
call q("morie pattern std size")
#
graphsize 200,150
clg
color black
for t = 0 to 1 step .01
   line 0,0,t*graphwidth,graphheight
   line 0,0,graphwidth,t*graphheight
next t
call q("morie pattern odd size")
graphsize 300,300
#
clg
color black
for x = 0 to 10 step .1
   y = (100- x^2)^.5
   plot 150-x, 150-y
   plot 150-x, 150+y
   plot 150+x, 150-y
   plot 150+x, 150+y
next x
call q("circle using x^2+y^2=r^2")
#
clg
penwidth 10
color green, blue
redim c(1)
c = {100, 100, 200, 200, 100, 200}
poly c
penwidth 5
color orange, black
poly {100, 100, 200, 200, 200, 100}
call q("poly - orange/black and green/blue triangles with different fill and pen")
penwidth 0
#
clg
color red
font "Times New Roman",18,50
text 10,100,"This is Times New Roman"
color darkgreen
font "Tahoma",10,100
text 10,200,"This is Tahoma!"
call q("Font - Times and Tahoma")
# need image load, stamp, and sprite tests


###################################################
call section("Sound")
###################################################
say "hello.": call q("say helo")
say 3 + 7: call q("say ten")
sound 440,500: call q("half second sound")
sound {440,100,220,100,300,200} : call q("three sounds from list")
# need wavplay

###################################################
call section("Sprites")
###################################################
spritedim 5
clg
# make the sprites from polys using the subroutine polysprite
penwidth 3
# two big right triangles
points =  {0,0,200,0,100,100}
call polysprite(0, ref(points), black, red, clear, 1)
call polysprite(1, ref(points), black, green, clear, 1)
# two small right triangles
points =  {200,0,200,100,150,50}
call polysprite(2, ref(points), black, blue, clear, 1)
call polysprite(3, ref(points), black, yellow, clear, 1)
# one medium triangle
points =  {200,100,200,200,100,200}
call polysprite(4, ref(points), black, cyan, clear, 1)
color white
rect 0,0,graphwidth, graphheight
color black
penwidth 1
for t = 0 to graphwidth step 10
   line 0,t,graphwidth,t
   line t,0,t,graphheight
next t
refresh
for t = 0 to 4
   spriteshow t
next t
# move the sprites randomly scaled and rotated
for t = 1 to 500
   spriteplace int(rand*5), int(rand*graphwidth) , int(rand*graphheight),rand*2,int(2*pi*rand)
   refresh
next t
for t = 0 to 4
   spritehide t
next t
call q("sprite test - is the screen a clean grid?")

###################################################
call section("IMGSave, IMGLoad, Kill and Exists")
###################################################
clg
penwidth 1
for t = 1 to 20
   color rgb(rand*256,rand*256,rand*256,rand*256)
   line rand*graphwidth, rand*graphheight, 10*rand, 10*rand
next t
refresh
imgsave "testimgsave.png"
pause .5
clg
refresh
pause .5
imgload graphwidth/2,graphheight /2,"testimgsave.png"
call q("imgload - did the image wink out?")
clg
for t = 0 to 2* pi step .1
   imgload graphwidth/2,graphheight /2,t/2,t,"testimgsave.png"
   refresh
next t
call q("imgload - did the image spin out?")
kill "testimgsave.png"
call n("delete temp imgsave image",exists("testimgsave.png"),false)

###################################################
call section("Poly and Stamp")
###################################################
clg
penwidth 5
color red, black
poly {100,100,30,200,170,200}
refresh
call q("poly black triangle red border?")
clg
for t = 0 to 2 * pi step .1
   stamp 150,150,t / (2*pi),t,{0,0,-70,100,70,100}
   refresh
next t
call q("stamp growing and rotating black triangle red border?")

###################################################
call section("Mouse Functionality")
###################################################
clg
penwidth 1
color blue
rect 100,100,20,20
color red
rect 100,130,20,20
color green
circle 110,170,10
color black
circle 110,220,10
refresh
print "left click on the blue rectangle"
clickclear
while clickb <> 1
   pause .01
end while
call n("left click blue",pixel(clickx, clicky),blue)
print "RIGHT click on the green circle"
clickclear
while clickb <> 2
   pause .01
end while
call n("right click green",pixel(clickx, clicky),green)
if ostype()<>2 then
   print "CENTER click on the RED rectangle"
   clickclear
   while clickb <> 4
      pause .01
   end while
   call n("center click red",pixel(clickx, clicky),red)
end if
print "move mouse over black dot"
while pixel(mousex, mousey)<> black
   pause .01
end while
















###################################################
###################################################
###################################################
## Unattended tests follow
###################################################
###################################################
###################################################

###################################################
call section("Numeric Assignment")
###################################################
a = 1 : call n("a=1",a,1)
call n("a=1 during a++",a++,1)
call n("a=2 after a++",a,2)
call n("a = 3 after ++a",++a,3)
a += 7 : call n("a=10 after a+=7",a,10)
a -= 7 : call n("a=3 after a-=7",a,3)
a *= 7 : call n("a=21 after a*=7",a,21)
a /= 2 : call n("a=10.5 after a/=2",a,10.5)

###################################################
call section("String Assignment")
###################################################
b$ = "string" : call s('b$ = "string"', b$, "string")
b$ = 'string' : call s("b$ = 'string'", b$, 'string')
b$ = 2.75 : call s("b$ = 2.75", b$, "2.75")
b$ += "." : call s("b$ = '2.75.' after b+='.'", b$, "2.75.")
b$ += 9 : call s("b$ = '2.75.9' after b+=9", b$, "2.75.9")

###################################################
call section("Strings")
###################################################
call n("asc('a')", asc("a"), 97)
call n("chr(98)='b'", chr(98), "b")
call n('count("Hello", "lo")', count("Hello", "lo"), 1)
call n('count("Buffalo buffalo buffalo.","BUFFALO",true)', count("Buffalo buffalo buffalo.","BUFFALO",true), 3)
call n('countx("Buffalo buffalo buffalo.","[Bb][u]")', countx("Buffalo buffalo buffalo.","[Bb][u]"), 3)
c$ = Explode("How now brown cow"," ")
call s("implode-", implode(c$,"-"), "How-now-brown-cow")
call s("implode", implode(c$), "Hownowbrowncow")
c = Explode("1,2,3.33,4.44,5.55",",")
call s("implode, ", implode(c,", "), "1, 2, 3.33, 4.44, 5.55")
call s("implode", implode(c), "123.334.445.55")
call s("upper", upper('upper'), "UPPER")
call s("lower", lower('LOWER'), "lower")
call n('instr("Hello", "lo")',instr("Hello", "lo"),4)
call n('instr("Hello", "xx")',instr("Hello", "xx"),0)
call n('instr("101,222,333",",",5)',instr("101,222,333",",",5),8)
call n('instrx("HeLLo", "[Ll]o")',instrx("HeLLo", "[Ll]o"),4)
call n('instrx("Hello, Kitti","[Ii]",10)',instrx("Hello, Kitti","[Ii]",10),12)
call s('left("Hello", 2)',left("Hello", 2),"He")
call s('left("Hello", 999)',left("Hello", 999),"Hello")
call s('left("Hello", 0)',left("Hello", 0),"")
call s('right("Hello", 2)',right("Hello", 2),"lo")
call s('right("Hello", 999)',right("Hello", 999),"Hello")
call s('right("Hello", 0)',right("Hello", 0),"")
call n('length("Hello")',length("Hello"),5)
call n('length("")',length(""),0)
call s('MD5("Something")',MD5("Something"),"73f9977556584a369800e775b48f3dbe")
call s('MD5("something")',MD5("something"),"437b930db84b8079c2dd804a71936b5f")
call s('mid("Hello", 2, 3)',mid("Hello", 2, 3),"ell")
call s('mid("Hello", 2, 0)',mid("Hello", 2, 0),"")
call s('mid("Hello", 2, 9999)',mid("Hello", 2, 9999),"ello")
call s('replace("abababba","a","c")',replace("abababba","a","c"),"cbcbcbbc")
call s('replace("abababba","q","c")',replace("abababba","q","c"),"abababba")
call s('replace("abababba","ab","c")',replace("abababba","ab","c"),"cccba")
b$ = "We all live in a yellow submarine, yellow submarine, yellow submarine."
call s('Replacex(b$,"ye.*ow","blue")',Replacex(b$,"ye.*ow","blue"),"We all live in a blue submarine.")
call s('Replacex(b$, "[wW]e", "Beatles")',Replacex(b$, "[wW]e", "Beatles"),"Beatles all live in a yellow submarine, yellow submarine, yellow submarine.")

###################################################
call section("Numeric Operations")
###################################################
call n("1+2", 1+2, 3)
call n("2+1", 2+1, 3)
call n("1-2", 1-2, -1)
call n("2-1", 2-1, 1)
call n("1*2", 1*2, 2)
call n("2*1", 2*1, 2)
call n("10/4", 10/4, 2.5)
call n("4/10", 4/10, 0.4)
call n("5%3", 5%3, 2)
call n("3%5", 3%5, 3)
call n("10\4", 10\4, 2)
call n("4\10", 4\10, 0)
call n("5.5%2.5", 5.5%2.5, .5)
call n("5.5\2.5", 5.5\2.5, 2)

###################################################
call section("Order of Numeric Operations")
###################################################
call n("1+10/2", 1 + 10 / 2, 6)
call n("(1+10)/2", (1+10) / 2, 5.5)
call n("1-10*2", 1 - 10 * 2, -19)
call n("(1-10)*2", (1-10) * 2, -18)

###################################################
call section("Integer Comparison")
###################################################
call n("1=1", 1=1, true)
call n("1=2", 1=2, false)
call n("1<>1", 1<>1, false)
call n("1<>2", 1<>2, true)
call n("1>0", 1>0, true)
call n("1>1", 1>1, false)
call n("1>2", 1>2, false)
call n("1>=0", 1>=0, true)
call n("1>=1", 1>=1, true)
call n("1>=2", 1>=2, false)
call n("1<0", 1<0, false)
call n("1<1", 1<1, false)
call n("1<2", 1<2, true)
call n("1<=0", 1<=0, false)
call n("1<=1", 1<=1, true)
call n("1<=2", 1<=2, true)

###################################################
call section("Float Comparison")
###################################################
call n("1.34=1.34", 1.34=1.34, true)
call n("1.34=3.56", 1.34=3.56, false)
call n("1.34<>1.34", 1.34<>1.34, false)
call n("1.34<>3.56", 1.34<>3.56, true)
call n("1.34>0.78", 1.34>0.78, true)
call n("1.34>1.34", 1.34>1.34, false)
call n("1.34>3.56", 1.34>3.56, false)
call n("1.34>=0.78", 1.34>=0.78, true)
call n("1.34>=1.34", 1.34>=1.34, true)
call n("1.34>=3.56", 1.34>=3.56, false)
call n("1.34<0.78", 1.34<0.78, false)
call n("1.34<1.34", 1.34<1.34, false)
call n("1.34<3.56", 1.34<3.56, true)
call n("1.34<=0.78", 1.34<=0.78, false)
call n("1.34<=1.34", 1.34<=1.34, true)
call n("1.34<=3.56", 1.34<=3.56, true)

###################################################
call section("String Comparison")
###################################################
call n("'bb'='bb'", "bb"="bb", true)
call n("'bb'='cc'", "bb"="cc", false)
call n("'bb'<>'bb'", "bb"<>"bb", false)
call n("'bb'<>'cc'", "bb"<>"cc", true)
call n("'bb'>'aa'", "bb">"aa", true)
call n("'bb'>'bb'", "bb">"bb", false)
call n("'bb'>'cc'", "bb">"cc", false)
call n("'bb'>='aa'", "bb">="aa", true)
call n("'bb'>='bb'", "bb">="bb", true)
call n("'bb'>='cc'", "bb">="cc", false)
call n("'bb'<'aa'", "bb"<"aa", false)
call n("'bb'<'bb'", "bb"<"bb", false)
call n("'bb'<'cc'", "bb"<"cc", true)
call n("'bb'<='aa'", "bb"<="aa", false)
call n("'bb'<='bb'", "bb"<="bb", true)
call n("'bb'<='cc'", "bb"<="cc", true)

###################################################
call section("RADIX Conversion")
###################################################
call s("255 -> 11111111 bin", tobinary(255), "11111111")
call n("11111111 bin -> 255", frombinary("11111111"), 255)
call s("255 -> ff hex", tohex(255), "ff")
call n("ff hex -> 255", fromhex("FF"), 255)
call s("36 -> 10 (36)", toradix(36,36), "10")
call n("22 (36) -> 74", fromradix("22",36), 74)

###################################################
call section("Functions and Subroutines")
###################################################
global globala, globalb$
globala = 99
globalb$ = "globalb"
call subone(1,"foo")
call n("globala=100 after sub",globala,100)
call s("globalb$='globalbfoo' after sub",globalb$,"globalbfoo")
a = 9
b$ = "hi"
c = funone(7, ref(a), "junk", ref(b$))
call n("return from funone",c,23)
call n("a=27 return from funone",a,27)
call s("b$='hihi' return from funone",b$,"hihi")

###################################################
call section("Error Trapping")
###################################################
onerror errortrap
print 8 / 0
call n("trap div zero", lasterror, 50)
throwerror 888
call n("trap throw 888", lasterror, 888)
offerror

###################################################
call section("Math Functions")
###################################################
call n("abs(-9)", abs(-9), 9)
call n("abs(-9.8)", abs(-9.8), 9.8)
call n("abs(5.4)", abs(5.4), 5.4)
call nclose("acos(1)", acos(1), 0)
call nclose("acos(0)", acos(0), pi/2)
call nclose("asin(1)", asin(1), pi/2)
call nclose("asin(0)", asin(0), 0)
call nclose("atan(1)", atan(1), pi/4)
call nclose("atab(0)", atan(0), 0)
call n("ceil(9.1)", ceil(9.1), 10)
call n("ceil(-5.4)", ceil(-5.4), -5)
call nclose("cos(pi/2)", cos(pi/2), 0)
call nclose("cos(0)", cos(0),1)
call nclose("sin(pi/2)", sin(pi/2), 1)
call nclose("sin(0)", sin(0), 0)
call nclose("tan(pi/4)", tan(pi/4), 1)
call nclose("tab(0)", tan(0), 0)
call nclose("exp(1)", exp(1), 2.718282)
call nclose("exp(log(10))", exp(log(10)), 10)
call nclose("log10(100)", log10(100), 2)
call nclose("radians(0)", radians(0), 0)
call nclose("radians(180)", radians(180), pi)
call nclose("degrees(0)", degrees(0), 0)
call nclose("degrees(pi)", degrees(pi), 180)
call nclose("sqr(2)=2^.5",sqr(2),2^.5)
call nclose("sqrt(5)=5^.5",sqrt(5),5^.5)
call n("int(-9)", int(-9), -9)
call n("int(-9.8)", int(-9.9), -9)
call n("int(5.4)", int(5.4), 5)
call n("int(0)", int(0), 0)

###################################################
call section("File I/O")
###################################################
b$ = "testsuite_file.txt"
print "new file - 0 to 255 on random length lines"
fileno = 3
open fileno,b$
reset fileno
for t = 0 to 255
   r = rand
   if r<.20 then
      writeline fileno, string(t)
   else
      if r<.40 then
         write fileno, string(t) + chr(9)
      else
         write fileno, string(t) + " "
      end if
   end if
next t
close fileno
# read tokens from file
open b$
a = 0
while not eof
   t$ = read
   a += int(t$)
end while
call n("read data sum", a, 32640)
close
# read lines from file and explode
open b$
a = 0
while not eof
   t$ = readline
   t$ = replace(t$,chr(9)," ")
   c$ = explodex(t$,"\t| ")
   for t = 0 to c$[?]-1
      a += int(c$[t])
   next t
end while
call n("readline data sum", a, 32640)
close
kill b$
# test freefile
for t = 0 to 7
   call n("freefile", freefile, t)
   open freefile,"testsuite_"+t+".txt"
next t
for t = 0 to 7
   close t
   kill "testsuite_"+t+".txt"
next t
call n("freefile", freefile, 0)

###################################################
call section("Binary File")
###################################################
b$ = "testsuite_binary.dat"
print "new file"
openb b$
reset
for t = 0 to 255
   writebyte t
next t
close
openb b$
a = 0
while not eof
   a+= readbyte()
end while
call n("bindata sum", a, 32640)
print "position to 10 and read"
seek 10
a=0
while not eof
   a+= readbyte()
end while
call n("bindata sum from 10", a, 32595)
close
kill b$

###################################################
call section("Database")
###################################################
dbopen "testsuite.db"
dbexecute "drop table if exists t;"
dbexecute "create table t (i integer primary key, d text);"
dbexecute "insert into t (i,d) values (1,'one');"
dbexecute "insert into t (i,d) values (2,'two');"
dbexecute "insert into t (i,d) values (3,NULL);"
dbopenset "select * from t order by d desc limit 1;"
call n("drow() - get row", dbrow(), true)
call n("dbint(0)=2", dbint(0), 2)
call s("dbstring(1)='two''", dbstring(1), "two")
call n("dbint('i')=2", dbint('i'), 2)
call s("dbstring('d')='two''", dbstring('d'), "two")
dbcloseset
#
dbopenset "select * from t where i = 3;"
call n("drow() - get row", dbrow(), true)
call n("dbnull(0)=false", dbnull(0), false)
call n("dbnull(1)=true'", dbnull(1), true)
call n("dbnull('i')=false", dbnull('i'), false)
call n("dbnull('d')=true", dbnull('d'), true)
call s("dbstring(1)='''", dbstring(1), "")
call s("dbstring('d')='''", dbstring('d'), "")
dbcloseset
#
t = freedb
dbopen t, "testsuite2.db"
dbexecute t, "drop table if exists t;"
dbexecute t, "create table t (i integer primary key, d text);"
dbexecute t, "insert into t (i,d) values (1,'one');"
dbexecute t, "insert into t (i,d) values (2,'two');"
dbopenset t, "select * from t order by d desc limit 1;"
call n("drow(t) - get row", dbrow(t), true)
call n("dbint(t,0)=2", dbint(t,0), 2)
call s("dbstring(t,1)='two''", dbstring(t,1), "two")
a = freedbset(t)
dbopenset t,a, "select * from t order by 1 limit 1;"
call n("drow(t,a) - get row", dbrow(t,a), true)
call n("dbint(t,a,0)=1", dbint(t,a,0), 1)
call s("dbstring(t,a,1)='one''", dbstring(t,a,1), "one")
dbcloseset t,a
dbcloseset t
dbclose t
kill "testsuite2.db"
dbclose
kill "testsuite.db"

###################################################
call section("Test Random and fastgraphics")
###################################################
clg
fastgraphics
min = rand
max = rand
tot = 0
k = 100000
for t = 1 to k
   n = rand
   if n < min then min = n
   if n > max then max = n
   tot = tot + n
   plot n*300,t%300
   if t%1000=0 then
      refresh
      color rgb(rand*256, rand*256, rand*256)
   end if
next t
tot = tot / k
call n("rand min "+min+">= 0..", min >=0, true)
call n("rand max "+max+"< 1", max < 1, true)
call n("rand avg "+tot+" ~ .5", tot>=.49 and tot<=.51, true)


###################################################
call section("Loops with Exit and Continue")
###################################################
total = 0
for t = 1 to 100
   if t = 3 or t = 4 or t = 10 then
      print "continue for = skip " + t
      continuefor
   end if
   total = total + t
   print t + " " + total
   if total > 100 then
      print "exit for"
      exit for
   end if
next t
call n("FOR - Exit and Continue", total, 103)
# test do
total = 0
t = 0
do
t++
   if t = 3 or t = 4 or t = 10 then
      print "continue do = skip " + t
      continue do
   end if
   total = total + t
   print t + " " + total
   if total > 100 then
      print "exit do"
      exit do
   end if
until t >= 100
call n("DO - Exit and Continue", total, 103)
# test while
total = 0
t = 0
while true
t++
   if t = 3 or t = 4 or t = 10 then
      print "continue while = skip " + t
      continue while
   end if
   total = total + t
   print t + " " + total
   if total > 100 then
      print "exit while"
      exit while
   end if
end while
call n("WHILE - Exit and Continue", total, 103)


###################################################
call section("Epsilon - Integer to Float Compare")
###################################################
total = 0
for t=1 to 10 step .00001
if t=int(t) then print t;: total+= t
next t
print " " + total
call n("EPSILON - For INT", total, 55)
#
total = 0
for t=10 to 1 step -.00001
if t=int(t) then print t;: total+= t
next t
print " " + total
call n("EPSILON - For Backwards INT", total, 55)










###################################################
###################################################
###################################################
print "PASSED ALL TESTS."
alert "All tests passed"
###################################################
###################################################
###################################################
end

subroutine errortrap()
   # do nothing but return so I can see error
end subroutine

function funone(a, ref(b), c$, ref(d$))
   # old way of returning (prev to 0.9.9.21)
   a *= 2
   funone = a + b
   c$ = funtwo$(ref(b), ref(d$))
end function

function funtwo$(ref(r), ref(s$))
   r *=3
   s$ += s$
   return "squiggy"
end function

subroutine subone(a, b$)
   # set globals
   globala += a
   globalb$ += b$
end subroutine

subroutine polysprite(spriteno, ref(points), pencolor, brushcolor, backgroundcolor, scale)
   # DRAW A STAMP ON THE SCREEN WITH SPECIFIED COLORS AND SCALE AND
   # CAPTURE IT AS A SPRITE
   minx = points[0]
   miny = points[1]
   maxx = points[0]
   maxy = points[1]
   for t = 1 to points[?]/2-1
      if points[t*2] < minx then minx = points[t*2]
      if points[t*2] > maxx then maxx = points[t*2]
      if points[t*2+1] < miny then miny = points[t*2+1]
      if points[t*2+1] > maxy then maxy = points[t*2+1]
   next t
   w = (maxx-minx)*scale + getpenwidth
   h = (maxy-miny)*scale + getpenwidth
   x = minx*-scale
   y = miny*-scale
   clg
   color backgroundcolor
   rect 0,0,w,h
   color pencolor, brushcolor
   stamp x,y,scale,0,points
   spriteslice spriteno,0,0,w,h
end subroutine

